;; -*- coding: utf-8; mode: kahua -*-
;;
;;  Copyright (c) 2005 Kahua.Org, All rights reserved.
;;  See COPYING for terms and conditions of using this software
;;
;; $Id:$
;;
(use srfi-1)
(use srfi-1)
(use srfi-19)
(use util.list)
(use util.match)
(use gauche.collection)

(load "schedule/version.kahua")

(define page-template
  (kahua:make-xml-template
   (kahua-template-path "schedule/page.xml")))

(define (make-month m y)
  (make-date 0 0 0 0 1 m y (date-zone-offset (current-date))))

(define (first-day-of-month date)
  (make-month (date-month date) (date-year date)))

(define (next-month date)
  (if (= (date-month date) 12)
      (make-month 1 (+ (date-year date) 1))
      (make-month (+ (date-month date) 1) (date-year date))))

(define (prev-month date)
  (if (= (date-month date) 1)
      (make-month 12 (- (date-year date) 1))
      (make-month (- (date-month date) 1) (date-year date))))

(define (days-of-month date)
  (round->exact
   (- (date->modified-julian-day (next-month date))
      (date->modified-julian-day (first-day-of-month date)))))

(define (date-slices-of-month date)
  (slices (append (make-list (date-week-day (first-day-of-month date)) #f)
		  (iota (days-of-month date) 1))
	  7 #t #f))

(define (ymd->date y m d)
  (let1 now (current-date)
    (cond [y (let ((m (if m (x->integer m) 1))
		   (d (if d (x->integer d) 1)))
	       (make-date 0 0 0 0
			  (if (<= 1 d 31) d 1)
			  (if (<= 1 m 12) m 1)
			  (x->integer y) (date-zone-offset now)))]
	  [else now])))

(define-entry (version)
  (kahua:xml-template->sxml
   page-template
   :title (title/ (@/ (id "title"))
		 "schedule")
   :body (div/ (@/ (id "body"))
	       (h1/ (format "schedule: version ~a"
			    *schedule-version*))
	       (a/cont/ (@@/ (cont greeting))
			"greeting"))))

(define-entry (greeting)
  (kahua:xml-template->sxml
   page-template
   :body (div/ (@/ (id "body"))
	       (h1/ "Hello, Kahua!")
	       (a/cont/ (@@/ (cont version))
			"version"))))

(define (calendar/ date)
  (table/
   (thead/
    (tr/ (th/ "←") (th/ (@/ (colspan "5")) (date->string date "~Y年~m月")) (th/ "→")))
   (tbody/
    (map/ (lambda (w)
	    (tr/ (map/ td/ w)))
	  (date-slices-of-month date)))))

(define-entry (show y m d)
  (let1 date (ymd->date y m d)
    (kahua:xml-template->sxml
     page-template
     :title (title/ (date->string date "~Y年~m月~d日"))
     :body (div/ (calendar/ date)))))
;
; initialization
;
   
(initialize-main-proc greeting)
