(use util.queue)

(define *tasks* (make-queue))

(define-syntax define-coroutine
  (syntax-rules ()
    [(_ (routine yield) body ...)
     (define (routine)
       (call/cc (lambda (return)
		  (define (yield)
		    (call/cc (lambda (cont)
			       (enqueue! *tasks* cont)
			       (return))))
		  body ...))
       ((dequeue! *tasks*)))]))

(define (coroutine-init! . rs)
  (set! *tasks* (make-queue))
  (for-each (lambda (r)
	      (enqueue! *tasks* r))
	    rs))

(define-coroutine (three yield)
  (let lp ()
    (print 'one)
    (yield)
    (print 'two)
    (yield)
    (print 'three)
    (yield)
    (lp)))

(define-coroutine (五 つぎ)
  (let ループ ()
       (print 'いち)
       (つぎ)
       (print 'に)
       (つぎ)
       (print 'さん)
       (つぎ)
       (print 'よん)
       (つぎ)
       (print 'ご)
       (つぎ)
       (ループ)))