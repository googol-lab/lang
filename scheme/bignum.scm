(define (div n d)
  (if (< n 0) 
      (if (< d 0) (quotient (+ n 1) d)
	  (+ (quotient (+ n 1) d) -1))
      (if (< d 0) (+ (quotient n d) -1)
	  (quotient n d))))

(define (mod n d)
  (if (< n 0)
      (if (< d 0) (+ (remainder (+ n 1) d) -1)
	  (+ (remainder (+ n 1) d) d -1))
      (if (< d 0) (+ (remainder n d) d)
	  (remainder n d))))

(define (pack x)
  (define (pk x) (if (null? x) 0 (+ (car x) (* (pk (cdr x)) #x10000))))
  (pk (reverse x)))

(define (unpack n)
  (define (up n) (if (and (< n #x8000) (>= n (- #x8000))) (list n)
		     (cons (mod n #x10000) (up (div n #x10000)))))
  (reverse (up n)))

(define (hex-image n)
  (define (d2hc x) (integer->char (modulo (+ (modulo (+ x 54) 64) 97) 103)))
  (string->symbol (list->string
		   (map (lambda (d) (d2hc (fix:and (fix:lsh n d) 15))) '(-12 -8 -4 0)))))

(define (num2hex n)
  (define (c n) (string (string-ref "0123456789abcdef" (fix:and n #xf))))
  (define (nh n) (if (and (<= -8 n) (< n 8))
		     (c n)
		     (string-append (nh (div n 16)) (c (mod n 16)))))
  (string->symbol (nh n)))

(define (packtest n) (num2hex (pack (unpack n))))
(define (unpacktest n) (map hex-image (unpack n)))

(unpacktest (expt 2 20))
(unpacktest (- (expt 2 20) 1))
(unpacktest (- (expt 2 20)))
(unpacktest (expt 2 31))
(unpacktest (- (expt 2 31) 1))
(unpacktest (- (expt 2 31)))
(unpacktest (* 10 (expt 2 28)))
(unpacktest (- (* 10 (expt 2 28))))

(packtest (expt 2 20))
(packtest (- (expt 2 20) 1))
(packtest (- (expt 2 20)))
(packtest (expt 2 31))
(packtest (- (expt 2 31) 1))
(packtest (- (expt 2 31)))
(packtest (* 10 (expt 2 28)))
(packtest (- (* 10 (expt 2 28))))

(define (expand w n)
  (cond ((= n 0) w)
	((>= (car w) 0) (expand (cons 0 w) (- n 1)))
	(else (expand (cons -1 (cons (+ (car w) #x10000) (cdr w))) (- n 1)))))

(define (contract l)
  (if (> (length l) 1)
      (let ((l0 (car l)) (l1 (cadr l)))
	(cond ((and (= l0 -1) (>= l1 #x8000))
	       (contract (cons (- l1 #x10000) (cddr l))))
	      ((and (= l0 0) (< l1 #x8000))
	       (contract (cdr l)))
	      (else l)))
      l))

(define (madd as bs)
  (define (ma a b)
    (if (null? a) (list 0)
	(let* ((t (ma (cdr a) (cdr b)))
	       (s (+ (car a) (car b) (car t))))
	  (cons (div s #x10000) (cons (mod s #x10000) (cdr t))))))
  (let* ((alis as) (blis bs) (alen (length as)) (blen (length bs)) (slis '()))
    (cond ((> alen blen) (set! blis (expand blis (- alen blen))))
	  ((< alen blen) (set! alis (expand alis (- blen alen)))))
    (set! slis (ma alis blis))
    (contract slis)))

(define (addtest a b) (map hex-image (madd (unpack a) (unpack b))))

(addtest #x40000000 #x40000000)
(addtest (- #x40000000) (- #x40000000))
(unpack -123123123123)
(unpack 123123123123)
(unpack 456456456456)
(addtest -123123123123 456456456456)

  (define (mmm u v w)
    (display (map hex-image u))
    (display (map hex-image v))
    (display (map hex-image w))
    (if (null? v) w
	(let* ((t (mmm u (cdr v) (cdr w)))
	       (s (mm u (car v) t)))
    (display (map hex-image t))
    (display (map hex-image s))
	  (cons (+ (car w) (car s)) (cdr s)))))

    (define (mm u b w)
      (if (null? u) (cons 0 w)
	  (let* ((t (mm (cdr u) b (cdr w)))
		 (c (+ (* (car u) b) (car w) (car t))))
	    (cons (div c #x10000) (cons (mod c #x10000) (cdr t))))))

(define (mmul as bs cs)
  (define (assim l)
    (if (null? l) (list 0)
	(let* ((t (assim (cdr l))) 
	       (s (+ (car l) (car t))))
	  (if (< s 0) (cons -1 (cons (+ s #x10000) (cdr t)))
	      (cons 0 (cons s (cdr t)))))))
  (let* ((clis cs) (dlis '()) (mlen (+ (length as) (length bs)))
	 (clen (length cs)))
    (if (< clen mlen) (begin (set! clis (expand clis (- mlen clen)))
			     (set! clen mlen)))    
    (set! dlis (mmm as bs (list-tail clis (- clen mlen))))
    (contract (if (= clen mlen) dlis
		  (begin (set-cdr! (list-tail clis (- clen mlen 1)) dlis)
			 (assim clis))))))

(define (multest a b c)
  (map hex-image (mmul (unpack a) (unpack b) (unpack c))))

(multest 129999 3 0)
(unpacktest (div (* #xfbcf 3) #x10000))
