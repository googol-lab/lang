// reference to definetion in nsIHelloWorld.idl
const nsIHelloXPCOM = Components.interfaces.nsIHelloXPCOM;

// interface needed for all components
const nsISupports = Components.interfaces.nsISupports;

// UUID identify component (generated by uuidgen command)
const CLASS_ID = Components.ID("{3DFD87E1-6F10-48C4-97B4-197F4F940637}");

// description
const CLASS_NAME = "My Hello World Javascript XPCOM Component";

// identifer by string
const CONTRACT_ID = "@tom-lpsd.dyndns.org/helloXPCOM;1";

/***********************************************************
class definition
***********************************************************/



function HelloXPCOM() {
    this.count = 0;
};

HelloXPCOM.prototype = {
    count : null,
    hello: function() {
	return "Hello World! count: " + this.count++;
    },

    QueryInterface: function(aIID) {
	if (!aIID.equals(nsIHelloXPCOM) &&    
	    !aIID.equals(nsISupports))
	    throw Components.results.NS_ERROR_NO_INTERFACE;
	return this;
    }
};

/***********************************************************
class factory

myHelloWorld = Components.classes["@tom-lpsd.dyndns.org/helloXPCOM;1"].
                          createInstance(Components.interfaces.nsIHelloXPCOM);

***********************************************************/
var HelloXPCOMFactory = {
  createInstance: function (aOuter, aIID)
  {
    if (aOuter != null)
      throw Components.results.NS_ERROR_NO_AGGREGATION;
    return (new HelloXPCOM()).QueryInterface(aIID);
  }
};

/***********************************************************
module defintion (xpcom registration)
***********************************************************/

var HelloXPCOMModule = {
    registerSelf: function(aCompMgr, aFileSpec, aLocation, aType) {
	aCompMgr = aCompMgr.QueryInterface(Components.interfaces.nsIComponentRegistrar);
	aCompMgr.registerFactoryLocation(CLASS_ID, CLASS_NAME, 
					 CONTRACT_ID, aFileSpec, aLocation, aType);
    },

    unregisterSelf: function(aCompMgr, aLocation, aType) {
	aCompMgr = aCompMgr.QueryInterface(Components.interfaces.nsIComponentRegistrar);
	aCompMgr.unregisterFactoryLocation(CLASS_ID, aLocation);        
    },
  
    getClassObject: function(aCompMgr, aCID, aIID) {
	if (!aIID.equals(Components.interfaces.nsIFactory))
	    throw Components.results.NS_ERROR_NOT_IMPLEMENTED;

	if (aCID.equals(CLASS_ID))
	    return HelloXPCOMFactory;

	throw Components.results.NS_ERROR_NO_INTERFACE;
    },

    canUnload: function(aCompMgr) { return true; }
};

/***********************************************************
module initialization
below function is called when application registers components.
***********************************************************/
function NSGetModule(aCompMgr, aFileSpec) { return HelloXPCOMModule; }
